gc()
library(tidyverse)
library(modelr)
# Loading raw data
my_data <- read_csv('5030143_HW4A.csv')
# Sampling
my_samplingframe <- my_data %>%
mutate(snum = sample.int(n(), n()) / n())
my_training <- my_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- my_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- my_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
my_training %>% write_csv('5030143_training.csv')
my_query %>% write_csv('5030143_query.csv')
my_test %>% write_csv('5030143_test.csv')
# Exploration / visualization
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% count(Group, t) %>%
pivot_wider(names_from = t, values_from = n) %>%
column_to_rownames('Group') %>% chisq.test()
my_training %>% count(Group) %>% select(n) %>% chisq.test()
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>%
ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>% ggplot(aes(y, x)) + geom_point()
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_trH <- my_training %>% filter(Group == 'H')
H_lfit <- lm(y~x, data = my_trH)
my_trH %>% ggplot(aes(x, y)) + geom_point() # Note the cutoff at y = 0
my_trH %>% ggplot(aes(y, x)) + geom_point()
trH_lfit <- my_trH %>%
add_predictions(H_lfit, var = 'trH_lfit_y') %>%
add_residuals(H_lfit, var = 'trH_lfit_resid')
trH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(trH_lfit_y, x), color = 'blue')
H_polyfit <- lm(y~poly(x, 2), my_trH)
trH_polyfit <- my_trH %>%
add_predictions(H_polyfit, var = 'trH_polyfit_y') %>%
add_residuals(H_polyfit, var = 'trH_polyfit_resid')
trH_polyfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(trH_polyfit_y, x), color='green')
# Looking at Residuals
trH_lfit %>% ggplot(aes(trH_lfit_resid)) + geom_histogram()
trH_polyfit %>% ggplot(aes(trH_polyfit_resid)) + geom_histogram()
trH_lfit %>% summarize(mean = mean(trH_lfit_resid), sd = sd(trH_lfit_resid))
trH_polyfit %>%
summarize(mean = mean(trH_polyfit_resid), sd = sd(trH_polyfit_resid))
trH_polyfit %>% ggplot(aes(trH_polyfit_resid)) + geom_histogram()
trH_lfit %>% summarize(mean = mean(trH_lfit_resid), sd = sd(trH_lfit_resid))
trH_polyfit %>%
summarize(mean = mean(trH_polyfit_resid), sd = sd(trH_polyfit_resid))
trH_lfit %>% ggplot(aes(trH_lfit_resid, x)) + geom_point()
trH_polyfit %>% ggplot(aes(trH_polyfit_resid, x)) + geom_point()
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='qH_lfit_resid') %>%
add_predictions(H_lfit, var='qH_lfit_pred') %>%
add_residuals(H_polyfit,var='qH_polyfit_resid') %>%
add_predictions(H_polyfit, var='qH_polyfit_pred')
my_qH %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(qH_polyfit_pred, x), color = 'green') +
geom_line(aes(qH_lfit_pred, x), color = 'orange')
my_qH %>% ggplot(aes(qH_lfit_resid, x)) + geom_point()
my_qH %>% ggplot(aes(qH_polyfit_resid, x)) + geom_point()
my_qH %>% summarize(mean = mean(qH_lfit_resid), sd = sd(qH_lfit_resid))
my_qH %>% summarize(mean = mean(qH_polyfit_resid), sd = sd(qH_polyfit_resid))
my_tH <- my_test %>% filter(Group == 'H') %>%
add_residuals(H_polyfit, var='tH_polyfit_resid') %>%
add_predictions(H_polyfit, var='tH_polyfit_pred')
my_tH %>% ggplot(aes(tH_polyfit_resid)) + geom_histogram()
my_tH %>% ggplot(aes(tH_polyfit_resid, x)) + geom_point()
my_tH %>% summarize(mean = mean(tH_polyfit_resid), sd = sd(tH_polyfit_resid))
my_trF <- my_training %>% filter(Group == 'F')
my_trF %>% ggplot(aes(x, y)) + geom_point()
F_lfit <- lm(y~x, data = my_trF)
F_polyfit <- lm(y~poly(x, 2), my_trF)
trF_lfit <- my_trF %>%
add_predictions(F_lfit, var = 'trF_lfit_y') %>%
add_residuals(F_lfit, var = 'trF_lfit_resid')
trF_lfit %>% ggplot() + geom_point(aes(x,y)) +
geom_line(aes(x, trF_lfit_y), color = 'orange')
trF_polyfit <- my_trF %>%
add_predictions(F_polyfit, var = 'trF_polyfit_y') %>%
add_residuals(F_polyfit, var = 'trF_polyfit_resid')
trF_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, trF_polyfit_y), color = 'green')
# Looking at Residuals
trF_lfit %>% ggplot(aes(trF_lfit_resid)) + geom_histogram()
trF_polyfit %>% ggplot(aes(trF_polyfit_resid)) + geom_histogram()
trF_lfit %>% summarize(mean = mean(trF_lfit_resid), sd = sd(trF_lfit_resid))
trF_polyfit %>%
summarize(mean = mean(trF_polyfit_resid), sd = sd(trF_polyfit_resid))
trF_lfit %>% ggplot(aes(x, trF_lfit_resid)) + geom_point()
trF_polyfit %>% ggplot(aes(x, trF_polyfit_resid)) + geom_point()
my_qF <- my_query %>%
filter(Group == 'F') %>%
add_residuals(F_lfit, var='qF_lfit_resid') %>%
add_predictions(F_lfit, var='qF_lfit_pred') %>%
add_residuals(F_polyfit,var='qF_polyfit_resid') %>%
add_predictions(F_polyfit, var='qF_polyfit_pred')
my_qF %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, qF_polyfit_pred), color = 'green') +
geom_line(aes(x, qF_lfit_pred), color = 'orange')
my_qF %>% ggplot(aes(x, qF_lfit_resid)) + geom_point()
my_qF %>% ggplot(aes(x, qF_polyfit_resid)) + geom_point()
my_qF %>% summarize(mean = mean(qF_lfit_resid), sd = sd(qF_lfit_resid))
my_qF %>% summarize(mean = mean(qF_polyfit_resid), sd = sd(qF_polyfit_resid))
# Testing
my_tF <- my_test %>% filter(Group == 'F') %>%
add_residuals(F_polyfit, var='tF_polyfit_resid') %>%
add_predictions(F_polyfit, var='tF_polyfit_pred')
my_tF %>% ggplot(aes(tF_polyfit_resid)) + geom_histogram()
my_tF %>% ggplot(aes(x, tF_polyfit_resid)) + geom_point()
my_tF %>% summarize(mean = mean(tF_polyfit_resid), sd = sd(tF_polyfit_resid))
# Observations: The standard deviation remains lower for the polyfit model
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
# Observations: The standard deviation remains lower for the polyfit model
# by similar margins as with the earlier samples. The polyfit model seems to
# be an okay fit, and seems to work better than the linear model. The
# variability is rather low in general, but it is there.
my_qF %>% summarize(mean = mean(qF_polyfit_resid), sd = sd(qF_polyfit_resid))
my_qF %>% summarize(mean = mean(qF_lfit_resid), sd = sd(qF_lfit_resid))
my_qF %>% summarize(mean = mean(qF_lfit_resid), sd = sd(qF_lfit_resid))
my_qF %>% summarize(mean = mean(qF_polyfit_resid), sd = sd(qF_polyfit_resid))
trF_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, trF_polyfit_y), color = 'green')
# Looking at Residuals
trF_lfit %>% ggplot(aes(trF_lfit_resid)) + geom_histogram()
trF_polyfit %>% ggplot(aes(trF_polyfit_resid)) + geom_histogram()
trF_lfit %>% summarize(mean = mean(trF_lfit_resid), sd = sd(trF_lfit_resid))
trF_polyfit %>%
summarize(mean = mean(trF_polyfit_resid), sd = sd(trF_polyfit_resid))
trF_lfit %>% ggplot(aes(x, trF_lfit_resid)) + geom_point()
trF_lfit %>% summarize(mean = mean(trF_lfit_resid), sd = sd(trF_lfit_resid))
trF_polyfit %>%
summarize(mean = mean(trF_polyfit_resid), sd = sd(trF_polyfit_resid))
my_qF <- my_query %>%
filter(Group == 'F') %>%
add_residuals(F_lfit, var='qF_lfit_resid') %>%
add_predictions(F_lfit, var='qF_lfit_pred') %>%
add_residuals(F_polyfit,var='qF_polyfit_resid') %>%
add_predictions(F_polyfit, var='qF_polyfit_pred')
my_qF %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, qF_polyfit_pred), color = 'green') +
geom_line(aes(x, qF_lfit_pred), color = 'orange')
trH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(trH_lfit_y, x), color = 'blue')
H_polyfit <- lm(y~poly(x, 2))
H_polyfit <- lm(y~poly(x, 2), my_trH)
trH_polyfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(trH_polyfit_y, x), color='green')
trH_lfit %>% ggplot(aes(trH_lfit_resid, x)) + geom_point()
trH_polyfit %>% ggplot(aes(trH_polyfit_resid, x)) + geom_point()
# Looking at Residuals
trH_lfit %>% ggplot(aes(trH_lfit_resid)) + geom_histogram()
trH_polyfit %>% ggplot(aes(trH_polyfit_resid)) + geom_histogram()
trH_lfit %>% summarize(mean = mean(trH_lfit_resid), sd = sd(trH_lfit_resid))
trH_polyfit %>%
summarize(mean = mean(trH_polyfit_resid), sd = sd(trH_polyfit_resid))
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='qH_lfit_resid') %>%
add_predictions(H_lfit, var='qH_lfit_pred') %>%
add_residuals(H_polyfit,var='qH_polyfit_resid') %>%
add_predictions(H_polyfit, var='qH_polyfit_pred')
my_qH %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(qH_polyfit_pred, x), color = 'green') +
geom_line(aes(qH_lfit_pred, x), color = 'orange')
my_qH %>% ggplot(aes(qH_lfit_resid, x)) + geom_point()
my_qH %>% ggplot(aes(qH_polyfit_resid, x)) + geom_point()
my_qH %>% summarize(mean = mean(qH_lfit_resid), sd = sd(qH_lfit_resid))
my_qH %>% summarize(mean = mean(qH_polyfit_resid), sd = sd(qH_polyfit_resid))
library(tidyverse)
library(dplyr)
library(e1071)
data("spam", package = 'kernlab')
View(spam)
# Using my dataset
data("MedGPA", package = "Stat2Data")
View(MedGPA)
?MedGPA
??MedGPA
my_samplingframe <- MedGPA %>% select(-Accept, -Acceptance, -Sex)
my_samplingframe <- MedGPA %>% select(-Accept, -Acceptance, -Sex) %>%
mutate(snum=sample.int(n(), n()) / n())
training <- my_samplingframe %>%
filter(snum < 0.6) %>%
select(-snum)
my_training <- my_samplingframe %>%
filter(snum < 0.6) %>%
select(-snum)
my_query <- my_samplingframe %>%
filter(snum >= 0.6,snum < 0.8) %>%
select(-snum)
my_test <- my_samplingframe %>%
filter(snum >= 0.8) %>%
select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
my_tinput <- my_training %>% select(-type)
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum=sample.int(n(), n()) / n())
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum=sample.int(n(), n()) / n())
View(my_samplingframe)
# Using my dataset
data("MedGPA", package = "Stat2Data")
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum=sample.int(n(), n()) / n())
View(my_samplingframe)
my_samplingframe <- MedGPA
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum=sample.int(n(), n()) / n())
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum = sample.int(n(), n()) / n())
my_training <- my_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- my_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- my_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
my_tinput <- my_training %>% select(-type)
my_tinput <- my_training %>% select(-Acceptance)
my_ttruth <- my_training$Acceptance
my_tr_input <- my_training %>% select(-Acceptance)
my_tr_truth <- my_training$Acceptance
my_q_input <- my_training %>% select(-Acceptance)
my_q_truth <- my_training$Acceptance
my_t_input <- my_training %>% select(-Acceptance)
my_t_truth <- my_training$Acceptance
my_tr_input <- my_training %>% select(-Acceptance)
my_tr_truth <- my_training$Acceptance
my_tr_input <- my_training %>% select(-Acceptance)
my_tr_truth <- my_training$Acceptance
my_q_input <- my_query %>% select(-Acceptance)
my_q_truth <- my_query$Acceptance
my_t_input <- my_test %>% select(-Acceptance)
my_t_truth <- my_test$Acceptance
# Training
med_pca <- my_tr_input %>% prcomp()
View(my_tr_input)
View(my_trH)
View(my_tr_input)
my_tr_input[is.na(my_tr_input)] <- 0
med_pca <- my_tr_input %>% prcomp()
med_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
library(tidyverse)
library(dplyr)
library(e1071)
data("spam", package = 'kernlab')
raw_data_samplingframe <- spam %>% select(-george, -num650) %>%
mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
training %>% write_csv('spam_training.csv')
query %>% write_csv('spam_query.csv')
test %>% write_csv('spam_test.csv')
training_input <- training %>% select(-type)
training_truth <- training$type
query_input <- query %>% select(-type)
query_truth <- query$type
test_input <- test %>% select(-type)
test_truth <- test$type
# Training
spam_pca <- training_input %>% prcomp()
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
med_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
med_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
View(spam_pca)
View(spam_pca)
View(spam_pca)
View(test_input)
# Trying SVM training
my_linear <- svm(type~., data = my_training, kernel = 'linear')
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
my_linear <- my_t_input %>% svm(y = my_t_truth, kernel = 'linear')
my_linear <- my_t_input %>% svm(y = my_t_truth, kernel = 'linear')
my_poly <- svm(Acceptance~., data = my_training, kernel = 'polynomial')
my_radial <- svm(Acceptance~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(Acceptance~., data = my_training, kernel = 'sigmoid')
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_tr_pca <- med_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_tr_pca <- med_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(sl, my_tr_pca, PC1~PC2)
plot(sp, my_tr_pca, PC1~PC2)
plot(sr, my_tr_pca, PC1~PC2)
plot(ss, my_tr_pca, PC1~PC2)
plot(sl, training_pca, PC1~PC2)
# Trying SVM training
svm_linear <- svm(type~., data = training, kernel = 'linear')
svm_linear <- training_input %>% svm(y = training_truth, kernel = 'linear')
svm_poly <- svm(type~., data = training, kernel = 'polynomial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_sigmoid <- svm(type~., data = training, kernel = 'sigmoid')
training_pca <- spam_pca$x %>% as_tibble() %>% mutate(type = training_truth)
sl <- svm(type~., data = training_pca, kernel = 'linear')
sp <- svm(type~., data = training_pca, kernel = 'polynomial')
sr <- svm(type~., data = training_pca, kernel = 'radial')
ss <- svm(type~., data = training_pca, kernel = 'sigmoid')
plot(sl, training_pca, PC1~PC2)
plot(sp, training_pca, PC1~PC2)
plot(sr, training_pca, PC1~PC2)
plot(sl, my_tr_pca, PC1~PC2)
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(Acceptance~., data = my_training, kernel = 'polynomial')
my_radial <- svm(Acceptance~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(Acceptance~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- med_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(sl, my_tr_pca, PC1~PC2)
plot(my_ss, my_tr_pca, PC1~PC2)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-Acceptance)
my_tr_truth <- my_training$Acceptance
my_q_input <- my_query %>% select(-Acceptance)
my_q_truth <- my_query$Acceptance
my_t_input <- my_test %>% select(-Acceptance)
my_t_truth <- my_test$Acceptance
my_tr_input[is.na(my_tr_input)] <- 0
med_pca <- my_tr_input %>% prcomp()
med_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(Acceptance~., data = my_training, kernel = 'polynomial')
my_radial <- svm(Acceptance~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(Acceptance~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- med_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
plot(my_sr, my_tr_pca, PC1~PC2)
my_tr_pca <- med_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Using my dataset
data("Crime", package = "plm")
# Clearing Workspace / Loading libraries
rm(list = ls())
gc()
library(tidyverse)
library(dplyr)
library(e1071)
data("spam", package = 'kernlab')
View(spam)
raw_data_samplingframe <- spam %>% select(-george, -num650) %>%
mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
training %>% write_csv('spam_training.csv')
query %>% write_csv('spam_query.csv')
test %>% write_csv('spam_test.csv')
training_input <- training %>% select(-type)
training_truth <- training$type
query_input <- query %>% select(-type)
query_truth <- query$type
test_input <- test %>% select(-type)
test_truth <- test$type
# Training
spam_pca <- training_input %>% prcomp()
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
spam_kmeans <- training_input %>% kmeans(2)
kmeans_results <- tibble(training_truth, km = spam_kmeans$cluster)
kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n)
ct <- kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n) %>%
column_to_rownames('training_truth')
chisq.test(ct)
spam_pca$x %>% as_tibble() %>%
ggplot(aes(PC1, PC2, color = spam_kmeans$cluster)) + geom_point()
# Trying SVM training
svm_linear <- svm(type~., data = training, kernel = 'linear')
svm_linear <- training_input %>% svm(y = training_truth, kernel = 'linear')
svm_poly <- svm(type~., data = training, kernel = 'polynomial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_sigmoid <- svm(type~., data = training, kernel = 'sigmoid')
training_pca <- spam_pca$x %>% as_tibble() %>% mutate(type = training_truth)
sl <- svm(type~., data = training_pca, kernel = 'linear')
sp <- svm(type~., data = training_pca, kernel = 'polynomial')
sr <- svm(type~., data = training_pca, kernel = 'radial')
ss <- svm(type~., data = training_pca, kernel = 'sigmoid')
plot(sl, training_pca, PC1~PC2)
plot(sp, training_pca, PC1~PC2)
plot(sr, training_pca, PC1~PC2)
plot(ss, training_pca, PC1~PC2)
# SVM Query
predict(svm_linear, query_input)
query_results <- tibble(query_truth,
linear = predict(svm_linear, query_input),
poly = predict(svm_poly, query_input),
radial = predict(svm_radial, query_input),
sigmoid = predict(svm_sigmoid, query_input))
query_results1 <- query_results %>% pivot_longer(cols=!query_truth)
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value == 'spam'),
tn = (query_truth == 'nonspam' & value == 'nonspam'),
fp = (query_truth == 'nonspam' & value == 'spam'),
fn = (query_truth == 'spam' & value == 'nonspam'))
query_results3 <- query_results2 %>% group_by(name) %>%
summarize(tp = sum(tp),
tn = sum(tn),
fp = sum(fp),
fn = sum(fn))
query_results3 %>% mutate(accuracy = (tp + tn) / (tp + tn + fp + fn),
sensitivity = tp / (tp + fn),
specificity = tn / (tn + fp),
ppv = tp / (tp + fp),
npv = fn / (tn + fn),
f1 = (2 * tp) / (2 * tp + fp + fn))
# SVM Test
test_results <- tibble(test_truth,
linear = predict(svm_linear, test_input))
test_results1 <- test_results %>% pivot_longer(cols=!test_truth)
test_results2 <- test_results1 %>%
mutate(tp = (test_truth == 'spam' & value == 'spam'),
tn = (test_truth == 'nonspam' & value == 'nonspam'),
fp = (test_truth == 'nonspam' & value == 'spam'),
fn = (test_truth == 'spam' & value == 'nonspam'))
test_results3 <- test_results2 %>% group_by(name) %>%
summarize(tp = sum(tp),
tn = sum(tn),
fp = sum(fp),
fn = sum(fn))
test_results3 %>% mutate(accuracy = (tp + tn) / (tp + tn + fp + fn),
sensitivity = tp / (tp + fn),
specificity = tn / (tn + fp),
ppv = tp / (tp + fp),
npv = fn / (tn + fn),
f1 = (2 * tp) / (2 * tp + fp + fn))
# Using my dataset
data("Crime", package = "plm")
install.packages("plm", dependencies = TRUE)
# Using my dataset
data("Crime", package = "plm")
my_samplingframe <- MedGPA %>% select(-Accept, -Sex) %>%
mutate(snum = sample.int(n(), n()) / n())
View(Crime)
?Crime
??Crime
??Crime
# Trying SVM training
my_linear <- svm(Acceptance~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
# Using my dataset
data("Crime", package = "plm")
