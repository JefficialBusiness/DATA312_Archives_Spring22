my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
my_t_input <- my_test %>% select(-votetrump)
my_t_truth <- my_test$votetrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
plot(my_sr, my_tr_pca, PC1~PC2)
plot(my_ss, my_tr_pca, PC1~PC2)
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
plot(my_sr, my_tr_pca, PC1~PC2)
plot(my_ss, my_tr_pca, PC1~PC2)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
my_t_input <- my_test %>% select(-votetrump)
my_t_truth <- my_test$votetrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
plot(my_sr, my_tr_pca, PC1~PC2)
plot(my_ss, my_tr_pca, PC1~PC2)
# SVM Query
predict(my_linear, my_q_input)
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
# SVM Query
predict(my_linear, my_q_input)
my_q_results <- tibble(my_q_truth,
my_linear = predict(my_linear, my_q_input),
my_poly = predict(my_poly, my_q_input),
my_radial = predict(my_radial, my_q_input),
my_sigmoid = predict(my_sigmoid, my_q_input))
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Clearing Workspace / Loading libraries
rm(list = ls())
gc()
library(tidyverse)
library(dplyr)
library(e1071)
library(DAAG) # For my dataset
data("TV16", package = "stevedata")
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
my_t_input <- my_test %>% select(-votetrump)
my_t_truth <- my_test$votetrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
data("spam", package = 'kernlab')
raw_data_samplingframe <- spam %>% select(-george, -num650) %>%
mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
training %>% write_csv('spam_training.csv')
query %>% write_csv('spam_query.csv')
test %>% write_csv('spam_test.csv')
training_input <- training %>% select(-type)
training_truth <- training$type
query_input <- query %>% select(-type)
query_truth <- query$type
test_input <- test %>% select(-type)
test_truth <- test$type
# Training
spam_pca <- training_input %>% prcomp()
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
spam_kmeans <- training_input %>% kmeans(2)
kmeans_results <- tibble(training_truth, km = spam_kmeans$cluster)
kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n)
ct <- kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n) %>%
column_to_rownames('training_truth')
chisq.test(ct)
spam_pca$x %>% as_tibble() %>%
ggplot(aes(PC1, PC2, color = spam_kmeans$cluster)) + geom_point()
# Trying SVM training
svm_linear <- svm(type~., data = training, kernel = 'gamma')
svm_linear <- training_input %>% svm(y = training_truth, kernel = 'linear')
svm_poly <- svm(type~., data = training, kernel = 'polynomial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_sigmoid <- svm(type~., data = training, kernel = 'sigmoid')
training_pca <- spam_pca$x %>% as_tibble() %>% mutate(type = training_truth)
sl <- svm(type~., data = training_pca, kernel = 'linear')
sp <- svm(type~., data = training_pca, kernel = 'polynomial')
sr <- svm(type~., data = training_pca, kernel = 'radial')
ss <- svm(type~., data = training_pca, kernel = 'sigmoid')
plot(sl, training_pca, PC1~PC2)
plot(sp, training_pca, PC1~PC2)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n()) %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
my_t_input <- my_test %>% select(-votetrump)
my_t_truth <- my_test$votetrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
my_q_input <- my_query %>% select(-votedtrump)
my_q_truth <- my_query$votedtrump
my_t_input <- my_test %>% select(-votedtrump)
my_t_truth <- my_test$votedtrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
my_poly <- svm(votedtrump~., data = my_training, kernel = 'polynomial')
my_poly <- svm(votedtrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votedtrump~., data = my_training, kernel = 'radial')
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n()) %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,]
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n()) %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n()) %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
new_samplingframe <- new_samplingframe[1:5000,] %>% select(-votetrump)
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,] %>% select(-votetrump)
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
new_samplingframe <- new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,] %>% select(-votetrump)
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
my_q_input <- my_query %>% select(-votedtrump)
my_q_truth <- my_query$votedtrump
my_t_input <- my_test %>% select(-votedtrump)
my_t_truth <- my_test$votedtrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe %>%
mutate(votedtrump = new_samplingframe$votetrump > 0)
new_samplingframe <- new_samplingframe[1:5000,] %>% select(-votetrump)
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
my_q_input <- my_query %>% select(-votedtrump)
my_q_truth <- my_query$votedtrump
my_t_input <- my_test %>% select(-votedtrump)
my_t_truth <- my_test$votedtrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
View(my_tr_pca)
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
my_q_input <- my_query %>% select(-votedtrump)
my_q_truth <- my_query$votedtrump
my_t_input <- my_test %>% select(-votedtrump)
my_t_truth <- my_test$votedtrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
data("TV16", package = "stevedata")
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
new_samplingframe <- na.omit(new_samplingframe) %>%
mutate(snum = sample.int(n(), n()) / n())
new_samplingframe <- new_samplingframe[1:5000,]
my_training <- new_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- new_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- new_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
my_training %>% write_csv('HW4B_training.csv')
my_query %>% write_csv('HW4B_query.csv')
my_test %>% write_csv('HW4B_test.csv')
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votedtrump)
my_tr_truth <- my_training$votedtrump
my_q_input <- my_query %>% select(-votedtrump)
# Separating Correct Answer / Identifying Variable
my_tr_input <- my_training %>% select(-votetrump)
my_tr_truth <- my_training$votetrump
my_q_input <- my_query %>% select(-votetrump)
my_q_truth <- my_query$votetrump
my_t_input <- my_test %>% select(-votetrump)
my_t_truth <- my_test$votetrump
trump_pca <- my_tr_input %>% prcomp()
trump_pca$x %>% as_tibble %>% mutate(type = my_tr_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
# Trying SVM training
my_linear <- svm(votedtrump~., data = my_training, kernel = 'linear')
# Trying SVM training
my_linear <- svm(votetrump~., data = my_training, kernel = 'linear')
my_linear <- my_tr_input %>% svm(y = my_tr_truth, kernel = 'linear')
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
my_ss <- svm(type~., data = my_tr_pca, kernel = 'sigmoid')
plot(my_sl, my_tr_pca, PC1~PC2)
View(my_tr_pca)
data("spam", package = 'kernlab')
View(spam)
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value == 'spam'),
tn = (query_truth == 'nonspam' & value == 'nonspam'),
fp = (query_truth == 'nonspam' & value == 'spam'),
fn = (query_truth == 'spam' & value == 'nonspam'))
# Trying SVM training
svm_linear <- svm(type~., data = training, kernel = 'gamma')
data("TV16", package = "stevedata")
new_samplingframe <- TV16 %>% select(-state, -age, -female, -collegeed, -racef)
query_results3 <- query_results2 %>% group_by(name) %>%
summarize(tp = sum(tp),
tn = sum(tn),
fp = sum(fp),
fn = sum(fn))
plot(my_sl, my_tr_pca, PC1~PC2)
plot(my_sp, my_tr_pca, PC1~PC2)
plot(my_sr, my_tr_pca, PC1~PC2)
plot(my_ss, my_tr_pca, PC1~PC2)
my_poly <- svm(votetrump~., data = my_training, kernel = 'polynomial')
my_radial <- svm(votetrump~., data = my_training, kernel = 'radial')
my_sigmoid <- svm(votetrump~., data = my_training, kernel = 'sigmoid')
my_tr_pca <- trump_pca$x %>% as_tibble() %>% mutate(type = my_tr_truth)
my_sl <- svm(type~., data = my_tr_pca, kernel = 'linear')
my_sp <- svm(type~., data = my_tr_pca, kernel = 'polynomial')
my_sr <- svm(type~., data = my_tr_pca, kernel = 'radial')
rm(list=ls())
gc()
library(tidyverse)
library(modelr)
library(e1071)
library(usmap)
megadata <- read_csv('EduUnempPovPopCovidVoting_StatCrunchV2.csv')
temporary <- megadata %>% mutate(fips = countyFIPS)
plot_usmap(regions = 'counties', data = temporary, values = 'TOT_POP',
include = c('CT','MA','RI'))
megadata <- megadata %>% mutate(countyFIPS = as.factor(countyFIPS))
raw_data_samplingframe <- megadata %>% mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum >= 0.8) %>% select(-snum)
View(raw_data_samplingframe)
