my_tH <- my_training %>% filter(Group == 'H')
H_lfit <- lm(y~x, data = my_tH)
H_polyfit <- lm(y~poly(x, 2), my_tH)
tH_lfit <- my_tH %>%
add_predictions(H_lfit, var = 'H_lfit_y') %>%
add_residuals(H_lfit, var = 'H_lfit_resid')
tH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(H_lfit_y, x), color = 'blue')
tH_polyfit <- my_tH %>%
add_predictions(H_polyfit, var = 'H_polyfit_y') %>%
add_residuals(H_polyfit, var = 'H_polyfit_resid')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='H_lfit_resid') %>%
add_predictions(H_lfit, var='H_lfit_pred') %>%
add_residuals(H_polyfit,var='H_polyfit_resid') %>%
add_predictions(H_polyfit,var='H_polyfit_pred')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue')
query_B <- query %>% filter(Group == 'B') %>%
add_predictions(lfit, var = 'lfit_pred') %>%
add_residuals(lfit, var = 'lfit_resid') %>%
add_predictions(polyfit, var = 'polyfit_pred') %>%
add_residuals(polyfit, var = 'polyfit_resid')
query_B %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, polyfit_pred), color = 'red') +
geom_line(aes(x, lfit_pred), color = 'blue')
# Exploration
training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_tH <- my_training %>% filter(Group == 'H')
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% count(Group, t) %>%
pivot_wider(names_from = t, values_from = n) %>%
column_to_rownames('Group') %>% chisq.test()
my_training %>% count(Group) %>% select(n) %>% chisq.test()
# Sampling
my_samplingframe <- my_data %>%
mutate(snum = sample.int(n(), n()) / n())
my_training <- my_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- my_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- my_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
my_training %>% write_csv('5030143_training.csv')
my_query %>% write_csv('5030143_query.csv')
my_test %>% write_csv('5030143_test.csv')
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% count(Group, t) %>%
pivot_wider(names_from = t, values_from = n) %>%
column_to_rownames('Group') %>% chisq.test()
my_training %>% count(Group) %>% select(n) %>% chisq.test()
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
# Sampling
raw_data_samplingframe <- raw_data %>%
mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>%
ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>%
ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training_kmeans <- my_training %>% kmeans(4)
my_training_kmeans <- my_training %>% kmeans(4)
View(my_training)
# Clearing Workspace / Loading libraries
rm(list = ls())
gc()
library(tidyverse)
library(e1071)
data("spam", package = 'kernlab')
data("spam", package = 'kernlab')
raw_data_samplingframe <- spam %>% select(-george, -num650) %>%
mutate(snum = sample.int(n(), n()) /n() )
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
training %>% write_csv('spam_training.csv')
query %>% write_csv('spam_query.csv')
test %>% write_csv('spam_test.csv')
training_input <- training %>% select(-type)
training_truth <- training$type
query_input <- query %>% select(-type)
query_truth <- query$type
test_input <- test %>% select(-type)
test_truith <- test$type
# Training
spam_pca <- training_input %>% prcomp()
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type))
spam_pca$x %>% as_tibble() %>% mutate(type = training_truth) %>%
ggplot(aes(PC1, PC2, color = type)) + geom_point()
training_input()
training_input
View(training_input)
spam_kmeans <- training_input %>% kmeans(2)
kmeans_results <- tibble(training_truth, km = spam_kmeans$cluster)
kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n)
ct <- kmeans_results %>% count(training_truth, km) %>%
pivot_wider(names_from = km, values_from = n) %>%
column_to_rownames('training_truth')
chisq.test(ct)
spam_pca$x %>% as_tibble() %>%
ggplot(aes(PC1, PC2, color = spam_kmeans$cluster)) + geom_point()
# Trying SVM training
svm_linear <- svm(type~., data = training, kernel = 'linear')
svm_linear <- training_input %>% svm(y = training_truth, kernel = 'linear')
svm_poly <- svm(type~., data = training, kernel = 'polynomial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_sigmoid <- svm(type~., data = training, kernel = 'sigmoid')
training_pca <- spam_pca$x %>% as_tibble() %>% mutate(type = training_truth)
sl <- svm(type., data = training_pca, kernel = 'linear')
sl <- svm(type~., data = training_pca, kernel = 'linear')
plot(sl, training_pca, PC1~PC2)
sp <- svm(type~., data = training_pca, kernel = 'polynomial')
plot(sp, training_pca, PC1~PC2)
l
plot(svm_poly, training_pca, PC1~PC2)
plot(svm_poly, training_pca, PC1~PC2)
svm_poly <- svm(type~., data = training, kernel = 'polynomial')
svm_radial <- svm(type~., data = training, kernel = 'radial')
svm_sigmoid <- svm(type~., data = training, kernel = 'sigmoid')
training_pca <- spam_pca$x %>% as_tibble() %>% mutate(type = training_truth)
sl <- svm(type~., data = training_pca, kernel = 'linear')
plot(svm_radial, training_pca, PC1~PC2)
svm_radial <- svm(type~., data = training, kernel = 'radial')
plot(svm_radial, training_pca, PC1~PC2)
sl <- svm(type~., data = training_pca, kernel = 'radial')
plot(sl, training_pca, PC1~PC2)
plot(svm_poly, training_pca, PC1~PC2)
sp <- svm(type~., data = training, kernel = 'polynomial')
sr <- svm(type~., data = training, kernel = 'radial')
ss <- svm(type~., data = training, kernel = 'sigmoid')
plot(ss, training_pca, PC1~PC2)
sl <- svm(type~., data = training_pca, kernel = 'sigmoid')
plot(sl, training_pca, PC1~PC2)
sl <- svm(type~., data = training_pca, kernel = 'linear')
sp <- svm(type~., data = training_pca, kernel = 'polynomial')
sr <- svm(type~., data = training_pca, kernel = 'radial')
ss <- svm(type~., data = training_pca, kernel = 'sigmoid')
plot(sl, training_pca, PC1~PC2)
plot(sp, training_pca, PC1~PC2)
plot(sr, training_pca, PC1~PC2)
plot(ss, training_pca, PC1~PC2)
plot(sl, training_pca, PC1~PC2)
# SVM Query
predict(svm_linear, query_input)
query_results <- tibble(query_truth,
linear = predict(svm_linear, query_input),
poly = predict(svm_poly, query_input),
radial = predict(svm_radial, query_input),
sigmoid = predict(svm_sigmoid, query_input))
query_results1 <- query_results %>% pivot_longer(cols=!query_truth)
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value = 'spam'),
tn = (query_truth == 'nonspam' & value = 'nonspam'),
fp = (query_truth == 'nonspam' & value = 'spam'),
fn = (query_truth == 'spam' & value = 'nonspam'))
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value = 'spam'),
tn = (query_truth == 'nonspam' & value = 'nonspam'),
fp = (query_truth == 'nonspam' & value = 'spam'),
fn = (query_truth == 'spam' & value = 'nonspam'))
library(tidyverse)
library(e1071)
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value = 'spam'),
tn = (query_truth == 'nonspam' & value = 'nonspam'),
fp = (query_truth == 'nonspam' & value = 'spam'),
fn = (query_truth == 'spam' & value = 'nonspam'))
query_results2 <- query_results1 %>%
mutate(tp = (query_truth == 'spam' & value == 'spam'),
tn = (query_truth == 'nonspam' & value == 'nonspam'),
fp = (query_truth == 'nonspam' & value == 'spam'),
fn = (query_truth == 'spam' & value == 'nonspam'))
query_results3 <- query_results2 %>% group_by(name) %>%
summarize(tp = sum(tp),
tn = sum(tn),
fp = sum(fp),
fn = sum(fn))
query_results3 %>% mutate(accuracy = (tp + tn) / (tp + tn + fp + fn),
sensitivity = tp / (tp + fn),
specificity = tn / (tn + fp),
ppv = tp / (tp + fp),
npv = fn / (tn + fn))
query_results3 %>% mutate(accuracy = (tp + tn) / (tp + tn + fp + fn),
sensitivity = tp / (tp + fn),
specificity = tn / (tn + fp),
ppv = tp / (tp + fp),
npv = fn / (tn + fn),
f1 = (2 * tp) / (2 * tp + fp + fn))
# SVM Test
test_results <- tibble(query_truth,
linear = predict(svm_linear, test_input))
# SVM Test
test_results <- query_truth,
linear = predict(svm_linear, test_input)
# SVM Test
test_results <- tibble(query_truth,
linear = predict(svm_linear, test_input))
View(query_results)
View(query_results1)
View(query_results2)
View(query_results1)
View(query_results)
# SVM Test
test_results <- tibble(test_truth,
linear = predict(svm_linear, test_input))
test_truth <- test$type
# SVM Test
test_results <- tibble(test_truth,
linear = predict(svm_linear, test_input))
View(test_results)
test_results1 <- test_results %>% pivot_longer(cols=!test_truth)
test_results2 <- test_results1 %>%
mutate(tp = (test_truth == 'spam' & value == 'spam'),
tn = (test_truth == 'nonspam' & value == 'nonspam'),
fp = (test_truth == 'nonspam' & value == 'spam'),
fn = (test_truth == 'spam' & value == 'nonspam'))
View(test_results2)
test_results3 <- test_results2 %>% group_by(name) %>%
summarize(tp = sum(tp),
tn = sum(tn),
fp = sum(fp),
fn = sum(fn))
test_results3 %>% mutate(accuracy = (tp + tn) / (tp + tn + fp + fn),
sensitivity = tp / (tp + fn),
specificity = tn / (tn + fp),
ppv = tp / (tp + fp),
npv = fn / (tn + fn),
f1 = (2 * tp) / (2 * tp + fp + fn))
install.packages("openintro", dependencies = TRUE)
# Using my dataset
heights <- data('fcid')
library(fcid)
library(openintro)
# Using my dataset
heights <- data('fcid')
heights
View(heights)
# Using my dataset
data('fcid')
View(fcid)
library(dplyr	)
# Using my dataset
data('storms')
View(storms)
data("spam", package = 'kernlab')
View(spam)
# Cleaning workspace / loading libraries
rm(list = ls())
gc()
library(tidyverse)
library(modelr)
# Load dataset
raw_data <- read_csv('data312_ml_michaelr.csv')
# Sampling
raw_data_samplingframe <- raw_data %>%
mutate(snum = sample.int(n(), n()) / n())
training <- raw_data_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
query <- raw_data_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
test <- raw_data_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
training %>% write_csv('michaelr_training.csv')
query %>% write_csv('michaelr_query.csv')
test %>% write_csv('michaelr_test.csv')
# Exploration
training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
training %>% filter(Group == 'B') %>% ggplot(aes(x, y)) + geom_point()
training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
training %>% count(Group)
training %>% count(Group, t) %>% pivot_wider(names_from = t, values_from = n)
training_B <- training %>% filter(Group == "B")
training_B %>% ggplot(aes(x, y)) + geom_point()
lfit <- lm(y~x, training_B)
training_lfit <- training_B %>% add_predictions(lfit, var = 'lfit_y')
training_lfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, lfit_y), color = 'red')
training_lfit <- training_lfit %>% add_residuals(lfit, var = 'lfit_y')
training_lfit <- training_B %>% add_predictions(lfit, var = 'lfit_y') %>%
add_residuals(lfit, var = 'lfit_resid')
training_lfit %>% ggplot(aes(x, lfit_resid)) + geom_point()
polyfit <- lm(y~poly(x, 2), training_B)
training_both <- training_B %>% add_predictions(polyfit, var = 'polyfit_y') %>%
add_residuals(polyfit, var = 'polyfit_resid')
training_both %>% ggplot(aes(x, polyfit_resid)) + geom_point()
query_B <- query %>% filter(Group == 'B') %>%
add_predictions(lfit, var = 'lfit_pred') %>%
add_residuals(lfit, var = 'lfit_resid') %>%
add_predictions(polyfit, var = 'polyfit_pred') %>%
add_residuals(polyfit, var = 'polyfit_resid')
query_B %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, polyfit_pred), color = 'red') +
geom_line(aes(x, lfit_pred), color = 'blue')
test_B <- test %>% filter(Group == 'B') %>%
add_predictions(polyfit, var = 'polyfit_pred') %>%
add_residuals(polyfit, var = 'polyfit_resid')
test_B %>% ggplot(aes(polyfit_resid)) + geom_histogram()
# Loading raw data
my_data <- read_csv('5030143_HW4A.csv')
# Sampling
my_samplingframe <- my_data %>%
mutate(snum = sample.int(n(), n()) / n())
my_training <- my_samplingframe %>% filter(snum < 0.6) %>% select(-snum)
my_query <- my_samplingframe %>% filter(snum >= 0.6, snum < 0.8) %>%
select(-snum)
my_test <- my_samplingframe %>% filter(snum > 0.8) %>% select(-snum)
my_training %>% write_csv('5030143_training.csv')
my_query %>% write_csv('5030143_query.csv')
my_test %>% write_csv('5030143_test.csv')
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% filter(t == 0) %>% ggplot(aes(x, y)) + geom_point()
my_training %>% count(Group, t) %>%
pivot_wider(names_from = t, values_from = n) %>%
column_to_rownames('Group') %>% chisq.test()
my_training %>% count(Group) %>% select(n) %>% chisq.test()
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>%
ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>% ggplot(aes(y, x)) + geom_point()
my_training %>% filter(t == 1) %>% ggplot(aes(x, y)) + geom_point()
my_tH <- my_training %>% filter(Group == 'H')
H_lfit <- lm(y~x, data = my_tH)
H_polyfit <- lm(y~poly(x, 2), my_tH)
tH_lfit <- my_tH %>%
add_predictions(H_lfit, var = 'H_lfit_y') %>%
add_residuals(H_lfit, var = 'H_lfit_resid')
tH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(H_lfit_y, x), color = 'blue')
tH_polyfit <- my_tH %>%
add_predictions(H_polyfit, var = 'H_polyfit_y') %>%
add_residuals(H_polyfit, var = 'H_polyfit_resid')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='H_lfit_resid') %>%
add_predictions(H_lfit, var='H_lfit_pred') %>%
add_residuals(H_polyfit,var='H_polyfit_resid') %>%
add_predictions(H_polyfit,var='H_polyfit_pred')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue')
my_training_kmeans <- my_training %>% kmeans(4)
View(my_training)
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training_kmeans <- my_training %>% kmeans(4)
my_training_kmeans <- my_training %>% select(-Group) %>% kmeans(4)
function (mapping = NULL, data = NULL, stat = "identity", position = "identity",
..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% filter(Group == 'H') %>%
ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_training %>% ggplot(aes(x, y, color = Group)) + geom_point() +
facet_grid(vars(s), vars(t))
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue')
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='H_lfit_resid') %>%
add_predictions(H_lfit, var='H_lfit_pred') %>%
add_residuals(H_polyfit,var='H_polyfit_resid') %>%
add_predictions(H_polyfit,var='H_polyfit_pred')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='H_lfit_resid') %>%
add_predictions(H_lfit, var='H_lfit_pred') %>%
add_residuals(H_polyfit,var='H_polyfit_resid') %>%
add_predictions(H_polyfit,var='H_polyfit_pred')
H_polyfit <- lm(y~poly(x, 2), my_tH)
tH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(H_lfit_y, x), color = 'blue')
tH_polyfit <- my_tH %>%
add_predictions(H_polyfit, var = 'H_polyfit_y') %>%
add_residuals(H_polyfit, var = 'H_polyfit_resid')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
H_polyfit <- lm(y~poly(x, 2), my_tH)
tH_lfit <- my_tH %>%
add_predictions(H_lfit, var = 'H_lfit_y') %>%
add_residuals(H_lfit, var = 'H_lfit_resid')
tH_lfit %>% ggplot() + geom_point(aes(y, x)) +
geom_line(aes(H_lfit_y, x), color = 'blue')
tH_polyfit <- my_tH %>%
add_predictions(H_polyfit, var = 'H_polyfit_y') %>%
add_residuals(H_polyfit, var = 'H_polyfit_resid')
tH_polyfit %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_y), color='green')
my_qH <- my_query %>%
filter(Group == 'H') %>%
add_residuals(H_lfit, var='H_lfit_resid') %>%
add_predictions(H_lfit, var='H_lfit_pred') %>%
add_residuals(H_polyfit,var='H_polyfit_resid') %>%
add_predictions(H_polyfit,var='H_polyfit_pred')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue') +
geom_line(aes(x, H_lfit_resid), color = 'orange') +
geom_line(aes(x, H_polyfit_resid), color = 'green')
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue') +
geom_point(aes(x, H_lfit_resid), color = 'orange') +
geom_point(aes(x, H_polyfit_resid), color = 'green')
# lfit Residuals
th_lfit %>% ggplot(aes(x, lfit_resid)) + geom_point()
# lfit Residuals
tH_lfit %>% ggplot(aes(x, lfit_resid)) + geom_point()
# lfit Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(x, H_lfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_bar()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_histogram()
tH_polyfit %>% ggplot(aes(x, H_polyfit_resid)) + geom_point()
tH_polyfit %>% ggplot(aes(H_polyfit_resid)) + geom_histogram()
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(H_lfit_resid)) + geom_histogram()
tH_polyfit %>% ggplot(aes(H_polyfit_resid)) + geom_histogram()
tH_lfit %>% summarize(mean = mean(H_lfit_resid), sd = sd(H_lfit_resid))
tH_lfit %>% ggplot(aes(H_lfit_resid)) + geom_histogram()
tH_polyfit %>% ggplot(aes(H_polyfit_resid)) + geom_histogram()
tH_polyfit %>% summarize(mean = mean(H_polyfit_resid), sd = sd(H_polyfit_resid))
tH_lfit %>% summarize(mean = mean(H_lfit_resid), sd = sd(H_lfit_resid))
tH_polyfit %>% summarize(mean = mean(H_polyfit_resid), sd = sd(H_polyfit_resid))
tH_polyfit %>% summarize(mean = mean(H_polyfit_resid), sd = sd(H_polyfit_resid))
my_training_kmeans <- my_training %>% select(-Group) %>% kmeans(4)
my_qH %>% ggplot() + geom_point(aes(x, y)) +
geom_line(aes(x, H_polyfit_pred), color = 'red') +
geom_line(aes(x, H_lfit_pred), color = 'blue') +
geom_point(aes(x, H_lfit_resid), color = 'orange') +
geom_point(aes(x, H_polyfit_resid), color = 'green')
my_training_kmeans <- my_training %>% select(-Group) %>% kmeans(4)
my_training_kmeans %>%
# Selection - Looking at Residuals
tH_lfit %>% ggplot(aes(H_lfit_resid)) + geom_histogram()
tH_lfit %>% summarize(mean = mean(H_lfit_resid), sd = sd(H_lfit_resid))
tH_polyfit %>% ggplot(aes(H_polyfit_resid)) + geom_histogram()
tH_polyfit %>% summarize(mean = mean(H_polyfit_resid), sd = sd(H_polyfit_resid))
tH_lfit %>% summarize(mean = mean(H_lfit_resid), sd = sd(H_lfit_resid))
tH_polyfit %>% summarize(mean = mean(H_polyfit_resid), sd = sd(H_polyfit_resid))
View(my_training_kmeans)
View(my_training_kmeans)
View(my_training_kmeans)
View(my_training_kmeans)
my_training_kmeans %>% add_predictions(my_training_kmeans, var = 'training_kmeans')
my_training_kmeans %>%
add_predictions(my_training_kmeans, var = 'training_kmeans')
my_training_kmeans %>%
add_predictions(my_training_kmeans, var = 'training_kmeans')
