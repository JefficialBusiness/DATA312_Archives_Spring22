rm(list=ls())
gc()
library(tidyverse)
library(tabr)
bach <- read_midi('bach_846_format0.mid')
bach <- read_midi('bach_846_format0.midi')
View(bach)
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
View(shakespeare_corpus)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in MIDI files
back %>% count(event)
# Retrieving summaries of types of data frames in MIDI files
bach %>% count(event)
# Exploration of note lengths
songs %>% group_by(name) %>% ggplot(aes(x=name, y=length)) + geom_boxplot()
# Retrieving summaries of types of data frames in MIDI files
count(bach, event, name = 'bach')
# Exploration of note lengths
songs %>% group_by(name) %>% ggplot(aes(x=name, y=length)) + geom_boxplot()
# Retrieving summaries of types of data frames in MIDI files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
View(edwin_improv)
View(edwin_improv)
View(edwin_improv2)
View(edwin_improv2)
# Exploration of note lengths
songs %>% group_by(name) %>% ggplot(aes(x=name, y=length)) + geom_boxplot()
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Exploration of note lengths
songs %>% group_by(name) %>% ggplot(aes(x=name, y=length)) + geom_boxplot()
# Exploration of note lengths
songs %>% group_by(name) %>% count(event)
# Exploration of note lengths
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
install.packages("tuneR", dependencies = TRUE)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in MIDI files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Building a comparison table with event data across all four files
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
# Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
View(edwin_improv)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
# Canceling N/A values
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch))
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, paremeter1)) + geom_point()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume for each file
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point + scale_x_log10() +
scale_y_log10()
songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point() + scale_x_log10() +
scale_y_log10()
s
# Analysis of note off/on statuses
note_off_times <- edwin_improv2 %>% filter(event == 'Note Off') %>% select(time)
note_on_times_plus_length <- edwin_improv2 %>% filter(event == 'Note On') %>%
mutate(note_end = time + length) %>%
select(note_end) %>%
arrange(note_end)
all(note_off_times == note_on_times_plus_length)
#
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_nutes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting individual songs
songs_notes <- filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='edwin_improv') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() + scale_y_log10()
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv2') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv2') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv2') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange()
+ scale_y_log10()
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
# Determining keys for improvised pieces
edwin_improv2 %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
edwin_improv %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = endtime, y = freq, fill = velocity)) +
geom_linerange()
# Splitting notes and harmony in edwin_improv
edwin_improv_notes <- songs_notes %>% filter(name == 'edwin_improv')
edwin_improv_melody <- edwin_improv_notes %>% filter(freq > 250)
edwin_improv_harmony <- edwin_improv_notes %>% filter(freq < 250)
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = endtime, y = freq, fill = velocity)) +
geom_linerange()
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, fill = velocity)) +
geom_linerange()
# Checking harmony and melody
edwin_improv_melody %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
edwin_improv_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
# Attempting
ei <- edwin_improv_melody
for (k in keys()) {
ei <- ei %>%
mutate(!!k = map(pitch, ~is_diatonic(.x, key = k)))
}
ei <- ei %>%
mutate(!!k: = map(pitch, ~is_diatonic(.x, key = k)))
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
}
}
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key=k)))
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key=k)))
}
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
}
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
}
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Explorative Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume distributions in each piece
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point() +
scale_x_log10() +
scale_y_log10()
# Analysis of note off/on statuses
note_off_times <- edwin_improv2 %>% filter(event == 'Note Off') %>% select(time)
note_on_times_plus_length <- edwin_improv2 %>% filter(event == 'Note On') %>%
mutate(note_end = time + length) %>%
select(note_end) %>%
arrange(note_end)
all(note_off_times == note_on_times_plus_length) # Are these the same? Yes.
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv2') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() + scale_y_log10()
# Determining keys for improvised pieces
edwin_improv2 %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
edwin_improv %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
# Splitting notes and harmony in edwin_improv
edwin_improv_notes <- songs_notes %>% filter(name == 'edwin_improv')
edwin_improv_melody <- edwin_improv_notes %>% filter(freq > 250)
edwin_improv_harmony <- edwin_improv_notes %>% filter(freq < 250)
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, fill = velocity)) +
geom_linerange()
# Checking harmony and melody
edwin_improv_melody %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
edwin_improv_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
# Attempting
ei <- edwin_improv_melody
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
}
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_katachi.midi')
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_katachi.midi')
View(gotoubun)
gotoubun <- read_midi('gotoubun_no_katachi.midi')
for (k in keys()) {
ei <- ei %>%
mutate(!!k:=map(pitch, ~is_diatonic(.x, key = k)))
}
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
View(gotoubun)
View(bohemian)
