edwin_improv2 %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
edwin_improv %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
# Splitting notes and harmony in edwin_improv
edwin_improv_notes <- songs_notes %>% filter(name == 'edwin_improv')
edwin_improv_melody <- edwin_improv_notes %>% filter(freq > 250)
edwin_improv_harmony <- edwin_improv_notes %>% filter(freq < 250)
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, fill = velocity)) +
geom_linerange()
# Checking harmony and melody
edwin_improv_melody %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
edwin_improv_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
my_songs <- bind_rows(mutate(bach, name = 'bohemian'),
mutate(edwin_improv, name = 'gotoubun'))
# Note length distribution analysis
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = time, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = time, y = frequency, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = time, y = freq, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequencies with respect to time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
View(songs_notes)
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Graphical analysis
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>%
mutate(keycheck = map(~is_diatonic(.x, key = 'e'))) %>%
count(keycheck == TRUE)
# Checking Keys
gotoubun %>%
mutate(keycheck = map(~is_diatonic(.x, key = 'e'))) %>%
count(keycheck == TRUE)
# Checking Keys
gotoubun %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e'))) %>% count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
bohemian %>% mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
bohemian %>% filter(event == 'Note On') %>% mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
gotoubun %>% filter(event == 'Note On') %>% mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'b'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'b_m'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'a'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
# Checking Keys
my_songs_notes %>% filter(name == "gotoubun") %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e`'))) %>%
count(keycheck == TRUE)
keys()
my_songs <- bind_rows(mutate(bach, name = 'bohemian'),
mutate(edwin_improv, name = 'gotoubun'))
# Note length distribution analysis
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
gotoubun_harmony <- songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun_harmony <- songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
gotoubun_harmony <- songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
gotoubun_harmony <- songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
# Checking Keys
gotoubun_harmony <- my_songs_notes %>% filter('gotoubun') %>% filter(freq < 260)
# Checking Keys
gotoubun_harmony <- my_songs_notes %>% filter('gotoubun')
# Checking Keys
gotoubun_harmony <- my_songs_notes %>% filter(name == 'gotoubun') %>% filter(freq < 260)
gotoubun_melody <- my_songs_notes %>% filter(name == 'gotoubun') %>% filter(freq > 260)
gotoubun_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Checking Keys
gotoubun_harmony <- my_songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq < 260)
gotoubun_melody <- my_songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun_harmony %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
gotoubun_melody %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c'))) %>%
count(keycheck == TRUE)
View(gotoubun_harmony)
gotoubun_melody %>%
ggplot(aes(xmin=time,xmax=endtime,y=freq,fill=velocity)) +
geom_linerange()
gotoubun_melody %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,fill=velocity)) +
geom_linerange()
View(my_songs)
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
my_songs <- bind_rows(mutate(bohemian, name = 'bohemian'),
mutate(gotoubun, name = 'gotoubun'))
# Note length distribution analysis
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Note length distribution analysis
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Pitch vs. velocity analysis
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Checking Keys
gotoubun_harmony <- my_songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq < 260)
gotoubun_melody <- my_songs_notes %>% filter(name == 'gotoubun') %>%
filter(freq > 260)
gotoubun_melody %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,fill=velocity)) +
geom_linerange()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
gotoubun %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
my_songs_notes %>% filter(name=='gotoubun') %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
my_songs_notes %>% filter(name=='gotoubun') %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'e_m'))) %>%
count(keycheck == TRUE)
keys()
my_songs_notes %>% filter(name=='bohemian') %>% select(pitch) %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c_'))) %>%
count(keycheck == TRUE)
my_songs_notes %>% filter(name=='bohemian') %>%
mutate(keycheck = map(pitch, ~is_diatonic(.x, key = 'c_'))) %>%
count(keycheck == TRUE)
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
my_songs_notes %>% filter(name=='bohemian') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Plotting note frequency as a function of time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Cleaning workspace and loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(audio)
library(GENEAread)
# Loading MIDI files
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecaphonic <- read_midi('justin_rubin_lyric.midi')
# Tidying/consolidating files
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecaphonic, name = 'duodecaphonic'))
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
song_lengths <- song_notes %>% group_by(name) %>%
summarize(total_time = max(end_time))
songs_lengths <- song_notes %>% group_by(name) %>%
summarize(total_time = max(end_time))
song_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
song_lengths <- song_notes %>% group_by(name) %>%
summarize(total_time = max(end_time))
View(song_lengths)
View(song_lengths)
# Experimentation
song_notes %>% group_by(name) %>% summarize(max(freq))
song_notes %>% group_by(name) %>% summarize(max(velocity))
# Cleaning workspace and loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(audio)
library(GENEAread)
# Loading MIDI files
bach <- read_midi('bach_846_format0.midi')
library(tuneR)
install.packages("tuneR", dependencies = TRUE)
library(tuneR)
# Loading MIDI files
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecaphonic <- read_midi('justin_rubin_lyric.midi')
# Tidying/consolidating files & gathering specific data
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecaphonic, name = 'duodecaphonic'))
song_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
song_lengths <- song_notes %>% group_by(name) %>%
summarize(total_time = max(end_time))
# Experimentation
song_notes %>% group_by(name) %>% summarize(max(freq))
song_notes %>% group_by(name) %>% summarize(max(velocity))
# Cleaning workspace and loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tuneR)
library(tabr)
library(audio)
library(GENEAread)
# Loading MIDI files
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecaphonic <- read_midi('justin_rubin_lyric.midi')
# Tidying/consolidating files & gathering specific data
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecaphonic, name = 'duodecaphonic'))
song_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
song_lengths <- song_notes %>% group_by(name) %>%
summarize(total_time = max(end_time))
# Experimentation
song_notes %>% group_by(name) %>% summarize(max(freq))
song_notes %>% group_by(name) %>% summarize(max(velocity))
song_notes <- songs_notes %>% inner_join(song_lengths)
song_notes <- song_notes %>% inner_join(song_lengths)
View(song_notes)
time_blocks <- 10
songs_notes_blocks <- song_notes %>% mutate(time_block = time/total_time)
songs_notes_blocks <- song_notes %>% mutate(time_block = floor(time/total_time))
songs_notes_blocks %>% group_by(name) %>% count(time_block) %>%
pivot_wider(names_from = name, values_from = n)
View(songs_notes_blocks)
songs_notes_blocks <- song_notes %>%
mutate(time_block = floor(time_blocks * time/total_time))
songs_notes_blocks %>% group_by(name) %>% count(time_block) %>%
pivot_wider(names_from = name, values_from = n)
songs_notes_blocks %>% filter(name == 'bach') %>% ggplot(aes(xmin = time, y = freq)) + geom_linerange()
songs_notes_blocks %>% filter(name == 'bach') %>% ggplot(aes(xmin = time, xmax = end_time, y = freq)) + geom_linerange()
songs_notes_blocks %>% count(name, note, time_block) %>%
ggplot(aes(time_block, n, group = note, color =  name)) + geon_line() +
facet_wrap(~note)
songs_notes_blocks %>% count(name, note, time_block) %>%
ggplot(aes(time_block, n, group = note, color =  name)) + geom_line() +
facet_wrap(~note)
songs_notes_blocks %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq)) + geom_linerange() +
face_wrap(~channel)
songs_notes_blocks %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq)) + geom_linerange() +
facet_wrap(~channel)
