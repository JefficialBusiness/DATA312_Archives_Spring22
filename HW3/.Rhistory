source("~/DATA312/HW3/HW3B.R")
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Explorative Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume distributions in each piece
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point() +
scale_x_log10() +
scale_y_log10()
# Analysis of note off/on statuses
note_off_times <- edwin_improv2 %>% filter(event == 'Note Off') %>% select(time)
note_on_times_plus_length <- edwin_improv2 %>% filter(event == 'Note On') %>%
mutate(note_end = time + length) %>%
select(note_end) %>%
arrange(note_end)
all(note_off_times == note_on_times_plus_length) # Are these the same? Yes.
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting individual songs
songs_notes %>% filter(name == 'bach') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes %>% filter(name == 'edwin_improv2') %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, color = velocity)) +
geom_linerange() + scale_y_log10()
songs_notes%>%filter(name=='duodecatonic') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() + scale_y_log10()
# Determining keys for improvised pieces
edwin_improv2 %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
edwin_improv %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
# Splitting notes and harmony in edwin_improv
edwin_improv_notes <- songs_notes %>% filter(name == 'edwin_improv')
edwin_improv_melody <- edwin_improv_notes %>% filter(freq > 250)
edwin_improv_harmony <- edwin_improv_notes %>% filter(freq < 250)
edwin_improv_harmony %>%
ggplot(aes(xmin = time, xmax = end_time, y = freq, fill = velocity)) +
geom_linerange()
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
my_songs <- bind_rows(mutate(bach, name = 'bohemian'),
mutate(edwin_improv, name = 'gotoubun'))
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
source("~/DATA312/HW3/HW3B.R")
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecatonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecatonic, event, name = 'duodecatonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecatonic, name = 'duodecatonic'))
# Explorative Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume distributions in each piece
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecaphonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecaphonic, event, name = 'duodecaphonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecaphonic, name = 'duodecaphonic'))
# Explorative Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume distributions in each piece
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point() +
scale_x_log10() +
scale_y_log10()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
View(duodecaphonic)
View(duodecaphonic)
# Cleaning workspace, invoking libraries
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
library(tuneR)
# Retrieving each MIDI file, initializing reference variables
bach <- read_midi('bach_846_format0.midi')
edwin_improv <- read_midi('improv.midi')
edwin_improv2 <- read_midi('improv2.midi')
duodecaphonic <- read_midi('justin_rubin_lyric.midi')
# Retrieving summaries of types of data frames in all 4 files
count(bach, event, name = 'bach') %>%
full_join(count(edwin_improv, event, name  = 'edwin_improv')) %>%
full_join(count(edwin_improv2, event, name  = 'edwin_improv2')) %>%
full_join(count(duodecaphonic, event, name = 'duodecaphonic'))
# Restructuring data for increased versatility in analysis
songs <- bind_rows(mutate(bach, name = 'bach'),
mutate(edwin_improv, name = 'edwin_improv'),
mutate(edwin_improv2, name = 'edwin_improv2'),
mutate(duodecaphonic, name = 'duodecaphonic'))
# Explorative Analysis using more versatile tidyverse table
songs %>% group_by(name) %>% count(event) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(channel) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(track) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(velocity) %>%
pivot_wider(names_from = name, values_from = n)
songs %>% group_by(name) %>% count(type) %>%
pivot_wider(names_from = name, values_from = n)
# Determining connotations of param1 & param2 through graphical analysis
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter1)) +
geom_violin()
songs %>% group_by(name) %>% ggplot(aes(x = pitch, y = parameter2)) +
geom_point()
songs %>% group_by(name) %>% ggplot(aes(x = name, y = parameter2)) +
geom_violin()
# Cont. connotation investigation: Note frequency search, excluding all N/A
# instances
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point()
songs %>% filter(!is.na(pitch)) %>% mutate(as_music_df(pitch)) %>%
ggplot(aes(freq, parameter1)) + geom_point() + scale_x_log10()
# Understanding parameter2
songs %>% filter(!is.na(pitch)) %>% ggplot(aes(x = velocity,
y = parameter2)) + geom_point()
# Analyzing velocity / volume distributions in each piece
songs %>% group_by(name) %>% ggplot(aes(x = name, y = velocity)) +
geom_boxplot()
# Analyzing note length distributions
songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
bohemian <- read_midi('Queen - Bohemian Rhapsody.midi')
gotoubun <- read_midi('gotoubun_no_kimochi.midi')
my_songs <- bind_rows(mutate(bach, name = 'bohemian'),
mutate(edwin_improv, name = 'gotoubun'))
my_songs %>% group_by(name) %>% ggplot(aes(x = name, y = length)) +
geom_boxplot()
my_songs %>% group_by(name) %>% count(length) %>%
ggplot(aes(x = length, y = n, color = name)) + geom_point() +
scale_x_log10() +
scale_y_log10()
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
my_songs_notes <- my_songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
my_songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Analysis of note velocities and frequencies in all four pieces
songs_notes <- songs %>% filter(!is.na(pitch)) %>%
mutate(as_music_df(pitch),
end_time = time + length)
songs_notes %>% group_by(name) %>%
ggplot(aes(x = freq, y = velocity, color = length)) +
geom_point() + facet_wrap(~name)
# Plotting note frequencies with respect to time
my_songs_notes %>% filter(name=='gotoubun') %>%
ggplot(aes(xmin=time,xmax=end_time,y=freq,color=velocity)) +
geom_linerange() +
scale_y_log10()
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'b'))
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'b major'))
keys()
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'b_m'))
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'c'))
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'e_m'))
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'e_m'))
# Checking Keys
gotoubun %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'e'))
bohemian %>% filter(event == 'Note On') %>% select(pitch) %>%
map(~is_diatonic(.x, key = 'a'))
library(audio)
