tidy_shakespeare <- book %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_shakespeare <- tidy_shakespeare %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
# Finding most common words in all (or most) of Shakespeare's work
tidy_shakespeare %>% count(word, sort=TRUE)
# Sorting words and their respective counts
word_counts <- tidy_shakespeare %>% count(word)
# Creating a word cloud using sorted data on word frequencies
tidy_shakespeare %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Retrieving / applying associated sentiments of words using "bing" lexicon
bing_sentiments <- get_sentiments("bing")
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
ct <- tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Chi-sq test
chSq <- chisq.test(ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
chSq$expected
chSq$stdres
# Pivoting to the use of "afinn" lexicon to determine sentiment by word weight
afinn_sentiments <- get_sentiments("afinn")
tidy_shakespeare_sentimental <- tidy_shakespeare %>%
inner_join(afinn_sentiments) %>% inner_join(bing_sentiments)
tidy_shakespeare_sentimental %>% group_by(Type) %>%
summarize(value = mean(value))
tidy_shakespeare_sentimental %>% ggplot(aes(Type, value)) + geom_violin()
data_for_acast <- tidy_shakespeare_sentimental %>%
count(word, sentiment, sort = TRUE)
acasted <- data_for_acast %>% acast(word ~ sentiment, value.var = "n",
fill = 0)
acasted %>% comparison.cloud(colors = c("firebrick4", "darkolivegreen4"),
max.words = 100)
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n())
new_book <- hamlet
new_book <- new_book %>%
add_row(loves_labour)
new_book <- new_book %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>%
anti_join(eme_stop_words)
# Sorting words
new_book %>% count(word, sort=TRUE)
word_counts <- new_book %>% count(word)
# Creation of wordcloud
new_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Analyzing trends in sentiment between both works
new_book <- new_book %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>% count(sentiment)
# Graphical analysis of gathered sentiment information
new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
new_ct <- new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Chi-sq test
chSq <- chisq.test(new_ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
chSq$expected
chSq$stdres
# Pivoting to the use of "afinn" lexicon to determine sentiment by word weight
afinn_sentiments <- get_sentiments("afinn")
new_book_sentimental <- new_book %>%
inner_join(afinn_sentiments) %>% inner_join(bing_sentiments)
new_book_sentimental %>% group_by(Type) %>%
summarize(value = mean(value))
new_book_sentimental %>% ggplot(aes(Type, value)) + geom_violin()
new_acast_data <- new_book_sentimental %>%
count(word, sentiment, sort = TRUE)
new_acasted <- new_acast_data %>% acast(word ~ sentiment, value.var = "n",
fill = 0)
new_acasted %>% comparison.cloud(colors = c("firebrick4", "darkolivegreen4"),
max.words = 100)
new_book <- hamlet
new_book <- new_book %>%
add_row(loves_labour)
new_book <- new_book %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>%
anti_join(eme_stop_words)
# Sorting words
new_book %>% count(word, sort=TRUE)
word_counts <- new_book %>% count(word)
# Creation of wordcloud
new_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Analyzing trends in sentiment between both works
new_book <- new_book %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>% count(sentiment)
# Graphical analysis of gathered sentiment information
new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
new_ct <- new_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Creation of wordcloud
hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n())
new_book <- hamlet
new_book <- new_book %>%
add_row(loves_labour)
new_book <- new_book %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>%
anti_join(eme_stop_words)
# Sorting words
new_book %>% count(word, sort=TRUE)
word_counts <- new_book %>% count(word)
# Creation of wordcloud
hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
new_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
View(hamlet)
# Graphical analysis of gathered sentiment information
tidied_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
tidied_book <- hamlet
tidied_book <- tidied_book %>% add_row(loves_labour)
tidy_new
tidy_book <- tidy_hamlet
tidy_book <- hamlet
tidy_book <- tidy_book %>% add_row(loves_labour)
tidy_book <- tidy_book %>% unnest_tokens(word, text)
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n()) %>% anti_join(stop_words) %>% anti_join(eme_stop_words)
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n()) %>% anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_book <- hamlet
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n()) %>% anti_join(stop_words) %>% anti_join(eme_stop_words)
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n()) %>% anti_join(stop_words) %>% anti_join(eme_stop_words)
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
hamlet <- hamlet %>% anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_hamlet <- hamlet %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_loves_labour <- loves_labour %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n())
tidy_book <- hamlet
tidy_hamlet <- hamlet %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_loves_labour <- loves_labour %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_book <- tidy_book %>% add_row(loves_labour)
tidy_book <- tidy_hamlet
tidy_book <- tidy_book %>% add_row(tidy_loves_labour)
View(tidy_book)
# Sorting words
tidy_book %>% count(word, sort=TRUE)
word_counts <- tidy_book %>% count(word)
# Creation of wordcloud
hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Sorting words
tidy_book %>% count(word, sort=TRUE)
word_counts <- tidy_book %>% count(word)
# Creation of wordcloud
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Creating a word cloud using sorted data on word frequencies
tidy_shakespeare %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Retrieving / applying associated sentiments of words using "bing" lexicon
bing_sentiments <- get_sentiments("bing")
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Creating new book table and adding both books
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21]) %>%
slice(256:n())
tidy_hamlet <- hamlet %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_loves_labour <- loves_labour %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_book <- tidy_hamlet
tidy_book <- tidy_book %>% add_row(tidy_loves_labour)
# Sorting words
tidy_book %>% count(word, sort=TRUE)
word_counts <- tidy_book %>% count(word)
# Creation of wordcloud
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book <- tidy_hamlet
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
View(tidy_book)
tidy_book <- tidy_hamlet
tidy_book <- tidy_book %>% add_row(tidy_loves_labour)
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Analyzing trends in sentiment between both works
tidy_book <- tidy_book %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Analyzing trends in sentiment between both works
tidy_book <- tidy_book %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>% count(sentiment)
# Analyzing trends in sentiment between both works
tidy_book <- tidy_book %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>% count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_book %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Analyzing trends in sentiment between both works
tidy_hamlet <- tidy_hamlet %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Analyzing trends in sentiment between both works
tidy_hamlet <- tidy_hamlet %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_loves_labour <- tidy_loves_labour %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Analyzing trends in sentiment between both works
tidy_hamlet <- tidy_hamlet %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_loves_labour <- tidy_loves_labour %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
tidy_loves_labour <- tidy_loves_labour %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
new_ct <- tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Chi-sq test
chSq <- chisq.test(new_ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
# Pivoting to the use of "afinn" lexicon to determine sentiment by word weight
afinn_sentiments <- get_sentiments("afinn")
tidy_book_sentimental <- tidy_book %>%
inner_join(afinn_sentiments) %>% inner_join(bing_sentiments)
tidy_book_sentimental %>% group_by(Type) %>%
summarize(value = mean(value))
tidy_book_sentimental %>% ggplot(aes(Type, value)) + geom_violin()
new_acast_data <- tidy_book_sentimental %>%
count(word, sentiment, sort = TRUE)
install.packages("Stat2Data")
# HW1B
# Jeffrey Williams
# Dr. Robinson
# January 28, 2022
# Clearing workspace
rm(list=ls())
gc()
# Invoking / installing libraries and fetching data
library(tidyverse)
library(Stat2Data)
data("FirstYearGPA")
head("FirstYearGPA")
summary("FirstYearGPA")
sapply("FirstYearGPA")
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Establishing a list of early modern english (EME) stop words for later removal
eme_stop_words <- tibble(word=c("thee", "thou", "hath", "thy", "thine", "ye",
"tis"))
# Iterates each book in shakespeare_corpus to add contents into one large data-
# frame
book <- gutenberg_download(shakespeare_corpus$`Gutenberg ID`[1])
bach <- read_midi('bach_846_format0.mid')
rm(list=ls())
gc()
library(tidyverse)
library(tabr)
bach <- read_midi('bach_846_format0.mid')
# Cleaning workspace / loading libraries
rm(list=ls())
gc()
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(textdata)
library(wordcloud)
library(reshape2)
library(wordcloud)
# Retrieving list of data on Shakesphere work
shakespeare_corpus <- read_csv('shakespeare_gutenberg.csv')
# Establishing a list of early modern english (EME) stop words for later removal
eme_stop_words <- tibble(word=c("thee", "thou", "hath", "thy", "thine", "ye",
"tis"))
# Iterates each book in shakespeare_corpus to add contents into one large data-
# frame
book <- gutenberg_download(shakespeare_corpus$`Gutenberg ID`[1])
# Iterates each book in shakespeare_corpus to add contents into one large data-
# frame
book <- gutenberg_download(shakespeare_corpus$`Gutenberg ID`[1],
mirror='http://gutenberg.readingroo.ms/')
for(i in 2:nrow(shakespeare_corpus)) {
book <- book %>%
add_row(gutenberg_download(shakespeare_corpus$'Gutenberg ID'[i]))
}
book <- book %>%
add_row(gutenberg_download(shakespeare_corpus$'Gutenberg ID'[i],
mirror='http://gutenberg.readingroo.ms/'))
for(i in 2:nrow(shakespeare_corpus)) {
book <- book %>%
add_row(gutenberg_download(shakespeare_corpus$'Gutenberg ID'[i],
mirror='http://gutenberg.readingroo.ms/'))
}
# Tidying / removal of stop words
tidy_shakespeare <- book %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_shakespeare <- tidy_shakespeare %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
# Finding most common words in all (or most) of Shakespeare's work
tidy_shakespeare %>% count(word, sort=TRUE)
# Sorting words and their respective counts
word_counts <- tidy_shakespeare %>% count(word)
# Creating a word cloud using sorted data on word frequencies
tidy_shakespeare %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Retrieving / applying associated sentiments of words using "bing" lexicon
bing_sentiments <- get_sentiments("bing")
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
ct <- tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Chi-sq test
chSq <- chisq.test(ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
chSq$expected
chSq$stdres
# Pivoting to the use of "afinn" lexicon to determine sentiment by word weight
afinn_sentiments <- get_sentiments("afinn")
tidy_shakespeare_sentimental <- tidy_shakespeare %>%
inner_join(afinn_sentiments) %>% inner_join(bing_sentiments)
tidy_shakespeare_sentimental %>% group_by(Type) %>%
summarize(value = mean(value))
tidy_shakespeare_sentimental %>% ggplot(aes(Type, value)) + geom_violin()
data_for_acast <- tidy_shakespeare_sentimental %>%
count(word, sentiment, sort = TRUE)
acasted <- data_for_acast %>% acast(word ~ sentiment, value.var = "n",
fill = 0)
acasted %>% comparison.cloud(colors = c("firebrick4", "darkolivegreen4"),
max.words = 100)
# Creating new book table and adding both books, tidied
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6]) %>%
slice(231:n())
# Creating new book table and adding both books, tidied
hamlet <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[6],
mirror='http://gutenberg.readingroo.ms/') %>%
slice(231:n())
loves_labour <- gutenberg_download(shakespeare_corpus$'Gutenberg ID'[21],
mirror='http://gutenberg.readingroo.ms/') %>%
slice(256:n())
tidy_hamlet <- hamlet %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_loves_labour <- loves_labour %>% unnest_tokens(word, text) %>%
anti_join(stop_words) %>% anti_join(eme_stop_words)
tidy_book <- tidy_hamlet
tidy_book <- tidy_book %>% add_row(tidy_loves_labour)
# Sorting words
tidy_book %>% count(word, sort=TRUE)
word_counts <- tidy_book %>% count(word)
# Creation of wordclouds for individual plays and both combined
tidy_hamlet %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_loves_labour %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_book %>% count(word) %>% with(wordcloud(word, n, max.words=100))
tidy_hamlet <- tidy_hamlet %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
tidy_loves_labour <- tidy_loves_labour %>%
inner_join(shakespeare_corpus, by=c('gutenberg_id'="Gutenberg ID"))
# Graphical analysis
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
new_ct <- tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Graphical analysis
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Graphical analysis
tidy_hamlet %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
tidy_loves_labour %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Finding most common words in all (or most) of Shakespeare's work
tidy_shakespeare %>% count(word, sort=TRUE)
# Sorting words and their respective counts
word_counts <- tidy_shakespeare %>% count(word)
# Creating a word cloud using sorted data on word frequencies
tidy_shakespeare %>% count(word) %>% with(wordcloud(word, n, max.words=100))
# Retrieving / applying associated sentiments of words using "bing" lexicon
bing_sentiments <- get_sentiments("bing")
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment)
# Graphical analysis of gathered sentiment information
tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% ggplot(aes(Type, n, fill=sentiment)) +
geom_col(position='dodge')
# Contingency table on sentiment information - widening for multi. relationships
ct <- tidy_shakespeare %>% inner_join(bing_sentiments) %>% group_by(Type) %>%
count(sentiment) %>% pivot_wider(names_from = sentiment, values_from = n) %>%
column_to_rownames(var = "Type")
# Chi-sq test
chSq <- chisq.test(ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
chSq$expected
chSq$stdres
# Chi-sq test
chSq <- chisq.test(new_ct)
chSq
# Analysis of chi-square test - expected values and implications regarding
# relationships
chSq$observed
chSq$expected
chSq$stdres
