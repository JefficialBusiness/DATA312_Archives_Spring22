geom_point(mapping=aes(x=HSGPA, y=GPA, color=(FirstGen)) +
labs(title="Relationship Between High School and College GPA +
First Generation Status"))
# Scatter-plot with the points colored by the numerical variable, SATM
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=as.factor(FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score"))
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=asFirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Scatter-plot colored by the categorical variable, CollegeBound
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM))
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
# Scatter-plot colored by the categorical variable, FirstGen
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
First Generation Status")
# Scatter-plot colored by the categorical variable, FirstGen
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=FirstGen)) +
labs(title="Relationship Between High School and College GPA +
First Generation Status")
# Scatter-plot with the points colored by the numerical variable, SATM
ggplot(data=FirstYearGPA) +
geom_point(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA +
SAT Mathematics Score")
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=SATM, color=SATV)) +
labs(title="Relationship Between High School and College GPA")
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
# ANALYSIS: There is statistical significance for the given correlation at the
# 95% confidence interval
# Equation for line of best fit: y = 0.56x + 1.18
# Creating scatter-plots, experimenting with Tidyverse
ggplot(FirstYearGPA)+geom_point(aes(HSGPA, GPA))
ggplot(FirstYearGPA, aes(HSGPA, GPA))+geom_point()
FirstYearGPA %>% ggplot(aes(HSGPA, GPA)) + geom_point()
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
abline(myline)
# First scatter-plot and line of best fit for numerical variables
# Numerical Variables: College and High School GPA (GPA, HSGPA)
plot(FirstYearGPA$HSGPA, FirstYearGPA$GPA,
main = "High School GPA vs. First Year College GPA",
xlab = "GPA - First Year in College",
ylab = "GPA - High School")
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
abline(myline)
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
# Retrieving analytical information about graph / line
summary(myline)
coef(myline)
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
# Retrieving analytical information about graph / line
summary(myline)
coef(myline)
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$HSGPA ~ FirstYearGPA$GPA)
# Retrieving analytical information about graph / line
summary(myline)
coef(myline)
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
# Retrieving analytical information about graph / line
summary(myline)
coef(myline)
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# T-test: Statistically Significant difference at 95% CI with p-value = 0.00025
t.test(nonwhite$GPA, iswhite$GPA)
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=WhiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=WhiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=WhiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=WhiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=FirstGen, fill=whiteBoolean),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# HW1B
# Jeffrey Williams
# Dr. Robinson
# January 28, 2022
# Clearing workspace
rm(list=ls())
gc()
# Invoking / installing libraries and fetching data
library(tidyverse)
library(Stat2Data)
data("FirstYearGPA")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(FirstGen), fill=as.factor(whiteBoolean)),
position="fill")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(FirstGen)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill")
# Creating subsets based on Boolean categorical variable, White
iswhite <- FirstYearGPA[FirstYearGPA$White==1,]
nonwhite <- FirstYearGPA[FirstYearGPA$White==0,]
# Conversion of binary variable, White, into Boolean statements for future use
FirstYearGPA$whiteBoolean <- FirstYearGPA$White > 0
FirstYearGPA$firstGenBoolean <- FirstYearGPA$FirstGen > 0
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill") +
labs(title="Percentage of First Gen Students who are White",
x = "Is First Gen?",
y = "Percentage of White Students")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill") +
labs(title="Percentage of First Gen Students who are White",
x = "Is First Gen?",
y = "Percentage of White Students",
colour = "Is White?")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill") +
labs(title="Percentage of First Gen Students who are White",
x = "Is First Gen?",
y = "Percentage of White Students",
color = "Is White?")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill") +
labs(title="Percentage of First Gen Students who are White",
x = "Is First Gen?",
y = "Percentage of White Students",
fill = "Is White?")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill")
# Step 43b: examining ratios; how many non-white/white first-gens?
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(firstGenBoolean), fill=as.factor(whiteBoolean)),
position="fill") +
labs(title="Percentage of First Gen Students who are White",
x = "Is First Gen?",
y = "Percentage of White Students",
fill = "Is White?")
ggplot(data=FirstYearGPA) + geom_bar(mapping=aes(x=as.factor(whiteBoolean), fill=as.factor(firstGenBoolean)),
position="fill") +
labs(title="Percentage of White Students who are First Gen",
x = "Is White?",
y = "Percentage of First Gen Students",
fill = "Is First Gen?")
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
geom_boxplot(mapping=aes(x=White, y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=White, y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(white), y=GPA))
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA))
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA)) +
labs(title="First Year College GPA Distribution between White and Non-White
Students",
x = "Is White?",
y = "Percentage of First Gen Students",
fill = "Is First Gen?")
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Use of stat summary, examining GPA differences in those who identify with
# category "White" and those who do not
ggplot(data=FirstYearGPA) +
stat_summary(mapping=aes(x=as.factor(White), y=GPA)) +
labs(title="First Year College GPA Distribution between White and Non-White
Students",
x = "Is White?",
y = "GPA")
# 45. stat_summary appears to be associated with geom_pointrange. I figured this
# out by submitting "?stat_summary" into the console and looking at usage
# information.
# Loess Curves
ggplot(data=FirstYearGPA) +
geom_smooth(mapping=aes(x=HSGPA, y=GPA, color=SATM)) +
labs(title="Relationship Between High School and College GPA")
myline <- lm(FirstYearGPA$GPA ~ FirstYearGPA$HSGPA)
# Retrieving analytical information about graph / line
summary(myline)
coef(myline)
# ANALYSIS: There is statistical significance for the given correlation at the
# 95% confidence interval
# Equation for line of best fit: y = 0.56x + 1.18
# Creating scatter-plots, experimenting with Tidyverse
ggplot(FirstYearGPA)+geom_point(aes(HSGPA, GPA))
ggplot(FirstYearGPA, aes(HSGPA, GPA))+geom_point()
FirstYearGPA %>% ggplot(aes(HSGPA, GPA)) + geom_point()
# First scatter-plot and line of best fit for numerical variables
# Numerical Variables: College and High School GPA (GPA, HSGPA)
plot(FirstYearGPA$HSGPA, FirstYearGPA$GPA,
main = "High School GPA vs. First Year College GPA",
xlab = "GPA - First Year in College",
ylab = "GPA - High School")
knitr::opts_chunk$set(fig.height = 3.5, fig.width = 6, fig.align = 'center')
knitr::opts_chunk$set(fig.height = 3.5, fig.width = 3, fig.align = NA)
